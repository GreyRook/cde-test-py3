stages:
  - test-project
  - test
  - build
  - dist


image: 'greyrook/cde-dev-py37:a355037c12bd7236957a9ab2e2519ada272aac50'


before_script:
  - pipenv --python `which python3`
  # pipenv and pip 18.1 are not compatible:
  # avoid https://github.com/pypa/pipenv/issues/2924
  - pipenv run pip install pip==18.0
  - pipenv install --dev
  - pipenv run pip install -e .


# ensure project has follows basic patterns to avoid
# less readble error messages later
test-project:
  stage: test-project
  before_script: []
  script:
    # ensure default files are available
    - ls Pipfile Pipfile.lock setup.py
    - grep "pytest " Pipfile
    - grep pytest-cov Pipfile
    - grep mypy Pipfile
    - grep pylint Pipfile
    - '[ -d "tests" ]'
    - '[ -d "$PYTHON_MODULE" ]'
    - '[ "$CI_REGISTRY_IMAGE" == "" ] || [ -f Dockerfile ]'


.test_template: &test_def
  script:
  - pipenv run py.test --cov ${PYTHON_MODULE} --cov tests --cov-report=html --cov-report=term tests


pytest-python3.6:
  <<: *test_def

  image: 'greyrook/cde-dev-py36:6e1eef7dc9269d32d1e3b0c389050e65f36111bc'
  except:
    variables:
      - $NO_PYTHON_36_SUPPORT == "1"

pytest-python3.7:
  <<: *test_def

  coverage: '/\d+\%\s*$/'
  artifacts:
    name: "coverage"
    paths:
     - htmlcov/


linting:
  stage: test
  script:
    - |
      bash << EOF
      echo "== pycodestyle =="
      pipenv run pycodestyle ${PYTHON_MODULE} tests/
      RES_CODESTYLE=$?

      echo "== pylint =="
      pipenv run pylint ${PYTHON_MODULE}
      RES_PYLINT=$?

      echo "== mypy =="
      pipenv run mypy --no-incremental --ignore-missing-imports ${PYTHON_MODULE}
      RES_MYPY=$?

      echo "== Summary =="

      if [ "$RES_CODESTYLE" == "0" ]; then
          echo -n "✔"
      else
          echo -n "✖ (code: $RES_CODESTYLE)"
      fi
      echo " pycodestyle"

      if [ "$RES_PYLINT" == "0" ]; then
          echo -n "✔"
      else
          echo -n "✖ (code: $RES_PYLINT)"
      fi
      echo " pylint"


      if [ "$RES_MYPY" == "0" ]; then
          echo -n "✔"
      else
          echo -n "✖ (code: $RES_MYPY)"
      fi
      echo " mypy"

      if [ "$RES_CODESTYLE" != "0" ] | [ "$RES_PYLINT" != "0" ] | [ "$RES_MYPY" != "0" ]; then
          echo "Not all checks passed"
          exit 1
      fi
      EOF


docker:
  stage: dist
  before_script:
    - mkdir -p ~/.docker
    - echo "$DOCKER_AUTH_CONFIG" > ~/.docker/config.json
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE:latest-${CI_COMMIT_REF_NAME} .

    ## smoke test for docker container
    ## TODO not working reliable
    # - DOCKER_BG=$(docker run -d --name ci-smoke-test $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA)
    # - 'echo "Running in the background, container: $DOCKER_BG"'
    # - |
    #   bash << EOF
    #   for i in `seq 1 200`; do
    #     STATUS=$(docker inspect --format '{{ .State.Health.Status }}' $DOCKER_BG)
    #     if [ "$STATUS" == "healthy" ]; then
    #       docker rm -f $DOCKER_BG
    #       exit 0
    #     fi
    #     sleep 0.1
    #   done

    #   docker rm -f $DOCKER_BG
    #   exit 1
    #   EOF

    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_SHA}
    - docker push $CI_REGISTRY_IMAGE:latest-${CI_COMMIT_REF_NAME}
  except:
    variables:
      - $CI_REGISTRY_IMAGE == ""
